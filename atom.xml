<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-20T04:00:53.453Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter使用qr_code_scanner遇到的问题</title>
    <link href="http://example.com/2021/06/15/Flutter%E4%BD%BF%E7%94%A8qr_code_scanner%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/06/15/Flutter%E4%BD%BF%E7%94%A8qr_code_scanner%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-06-15T08:23:05.000Z</published>
    <updated>2022-10-20T04:00:53.453Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、引入qr-code-scanner-0-7-0出现的问题"><a href="#一、引入qr-code-scanner-0-7-0出现的问题" class="headerlink" title="一、引入qr_code_scanner: ^0.7.0出现的问题"></a>一、引入qr_code_scanner: ^0.7.0出现的问题</h3><p>1.在flutter项目中的<code>pubspec.yaml</code>引入<code> qr_code_scanner: ^0.7.0</code>后，编译项目，fluter项目中出现的问题如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">Launching lib/main.dart on 王淑宁的iPhone in debug mode...</span><br><span class="line">Automatically signing iOS for device deployment using specified development team in Xcode project: N7XTE6J8P8</span><br><span class="line">CocoaPods&#x27; output:</span><br><span class="line">↳</span><br><span class="line">      Preparing</span><br><span class="line">    Analyzing dependencies</span><br><span class="line">    Inspecting targets to integrate</span><br><span class="line">      Using `ARCHS` setting to build architectures of target `Pods-Runner`: (``)</span><br><span class="line">    Fetching external sources</span><br><span class="line">    -&gt; Fetching podspec for `Flutter` from `Flutter`</span><br><span class="line">    -&gt; Fetching podspec for `qr_code_scanner` from `.symlinks/plugins/qr_code_scanner/ios`</span><br><span class="line">    Resolving dependencies of `Podfile`</span><br><span class="line">      CDN: trunk Relative path: CocoaPods-version.yml exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: all_pods_versions_0_2_a.txt exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/5.0.11/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/5.0.11/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/5.0.10/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/5.0.9/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/5.0.8/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/5.0.7/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/5.0.6/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/5.0.5/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/5.0.3/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/5.0.2/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/5.0.1/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/5.0.0/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/4.0.0/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/3.1.0/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/3.0.0/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/2.1.0/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/2.0.3/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/2.0.2/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/2.0.1/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.9.1/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.9.0/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.8.11/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.8.10/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.8.9/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.8.8/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.8.7/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.8.6/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.8.5/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.8.4/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.8.3/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.8.1/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.8.0/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.7.1/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.7.0/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.6.1/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.6.0/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.5.0/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.4.0/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.3.2/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.3.0/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.2.0/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/1.1.18/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/0.1.8/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/0.1.7/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/0.1.6/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/0.1.5/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/0.1.4/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/0.1.3/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/0.1.2/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">      CDN: trunk Relative path: Specs/0/2/a/MTBBarcodeScanner/0.1.1/MTBBarcodeScanner.podspec.json exists! Returning local because checking is only performed in repo update</span><br><span class="line">    Comparing resolved specification to the sandbox manifest</span><br><span class="line">      A Flutter</span><br><span class="line">      A MTBBarcodeScanner</span><br><span class="line">      A qr_code_scanner</span><br><span class="line">    Downloading dependencies</span><br><span class="line">    -&gt; Installing Flutter (1.0.0)</span><br><span class="line">    -&gt; Installing MTBBarcodeScanner (5.0.11)</span><br><span class="line">      &gt; Copying MTBBarcodeScanner from `/Users/ningspeals/Library/Caches/CocoaPods/Pods/Release/MTBBarcodeScanner/5.0.11-f453b` to `Pods/MTBBarcodeScanner`</span><br><span class="line">    -&gt; Installing qr_code_scanner (0.2.0)</span><br><span class="line">      - Running pre install hooks</span><br><span class="line">    [!] The following Swift pods cannot yet be integrated as static libraries:</span><br><span class="line">    The Swift pod `qr_code_scanner` depends upon `MTBBarcodeScanner`, which does not define modules. To opt into those targets generating module maps (which is necessary to import them from Swift when building as static libraries), you may set `use_modular_headers!` globally in your Podfile, or specify `:modular_headers =&gt; true` for particular dependencies.</span><br><span class="line">    /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.11.3/lib/cocoapods/installer/xcode/target_validator.rb:151:in `verify_swift_pods_have_module_dependencies&#x27;</span><br><span class="line">    /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.11.3/lib/cocoapods/installer/xcode/target_validator.rb:40:in `validate!&#x27;</span><br><span class="line">    /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.11.3/lib/cocoapods/installer.rb:597:in `validate_targets&#x27;</span><br><span class="line">    /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.11.3/lib/cocoapods/installer.rb:163:in `install!&#x27;</span><br><span class="line">    /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.11.3/lib/cocoapods/command/install.rb:52:in `run&#x27;</span><br><span class="line">    /Library/Ruby/Gems/2.6.0/gems/claide-1.0.3/lib/claide/command.rb:334:in `run&#x27;</span><br><span class="line">    /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.11.3/lib/cocoapods/command.rb:52:in `run&#x27;</span><br><span class="line">    /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.11.3/bin/pod:55:in `&lt;top (required)&gt;&#x27;</span><br><span class="line">    /usr/local/bin/pod:25:in `load&#x27;</span><br><span class="line">    /usr/local/bin/pod:25:in `&lt;main&gt;&#x27;</span><br><span class="line">Error output from CocoaPods:</span><br><span class="line">↳</span><br><span class="line">    [!] Automatically assigning platform `iOS` with version `9.0` on target `Runner` because no platform was specified. Please specify a platform for this target in your Podfile. See `https://guides.cocoapods.org/syntax/podfile.html#platform`.</span><br><span class="line">Exception: Error running pod install</span><br><span class="line">Exited (sigterm)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.用Xcode打开IOS项目，编译项目，出现的问题如图1：<br><img src="https://upload-images.jianshu.io/upload_images/6152450-1c0b883ed4466e40.png?imageMogr2/auto-orient/strip,imageView2/2/w/1240" alt="图1"></p><h5 id="二、解决问题的方法"><a href="#二、解决问题的方法" class="headerlink" title="二、解决问题的方法"></a>二、解决问题的方法</h5><p>出现上述问题的原因</p><h6 id="1-网络原因，下载GitHub项目需要翻墙，也就是需要VPN代理解决；"><a href="#1-网络原因，下载GitHub项目需要翻墙，也就是需要VPN代理解决；" class="headerlink" title="1.网络原因，下载GitHub项目需要翻墙，也就是需要VPN代理解决；"></a>1.网络原因，下载GitHub项目需要翻墙，也就是需要VPN代理解决；</h6><p>打开终端，输入VPN代理命令（eg：export https_proxy&#x3D;<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a> http_proxy&#x3D;<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a> all_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:7890），cd到相应的iOS目录中，pod update 或 pod install，具体操作步骤如图2：<br><img src="https://upload-images.jianshu.io/upload_images/6152450-5e67a27fa2aeb6fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2"></p><h6 id="2-上图中错误有两种原因导致，Xcode中的Podfile文件中没有引入-use-frameworks-或者没有引入use-modular-headers"><a href="#2-上图中错误有两种原因导致，Xcode中的Podfile文件中没有引入-use-frameworks-或者没有引入use-modular-headers" class="headerlink" title="2.上图中错误有两种原因导致，Xcode中的Podfile文件中没有引入 use_frameworks!或者没有引入use_modular_headers!"></a>2.上图中错误有两种原因导致，Xcode中的Podfile文件中没有引入<code> use_frameworks!</code>或者没有引入<code>use_modular_headers!</code></h6><p>打开Xcode中的Podfile文件，引入<code> use_frameworks!</code>或<code> use_modular_headers!</code>，具体操作如图3所示（在图中圈出地方引入）：<br><img src="https://upload-images.jianshu.io/upload_images/6152450-2e15e0795934e164.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3"></p><p>#####3.<a href="https://www.jianshu.com/p/fadcfaeed19b">ios 链接库的问题</a><br>操作完1.2后，在编译iOS项目，出现ld: library not found for -lXXX，这里的处理方式是：在iOS项目中打开Build Settings -&gt; Other Link Flags 打开以后，发现里面存在对应的库名称，前面还有一个前缀修饰： -lxxx，把和flutter相关的全部都删掉，然后commod + R。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、引入qr-code-scanner-0-7-0出现的问题&quot;&gt;&lt;a href=&quot;#一、引入qr-code-scanner-0-7-0出现的问题&quot; class=&quot;headerlink&quot; title=&quot;一、引入qr_code_scanner: ^0.7.0出现的问题</summary>
      
    
    
    
    
    <category term="Flutter" scheme="http://example.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="http://example.com/2019/09/08/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2019/09/08/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2019-09-08T03:01:36.000Z</published>
    <updated>2022-10-20T04:01:01.131Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="其他" scheme="http://example.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>IOS UITextFiled 用中文键盘输英文出现空格的解决方案</title>
    <link href="http://example.com/2018/07/22/IOS-UITextFiled-%E7%94%A8%E4%B8%AD%E6%96%87%E9%94%AE%E7%9B%98%E8%BE%93%E8%8B%B1%E6%96%87%E5%87%BA%E7%8E%B0%E7%A9%BA%E6%A0%BC%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://example.com/2018/07/22/IOS-UITextFiled-%E7%94%A8%E4%B8%AD%E6%96%87%E9%94%AE%E7%9B%98%E8%BE%93%E8%8B%B1%E6%96%87%E5%87%BA%E7%8E%B0%E7%A9%BA%E6%A0%BC%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2018-07-22T09:14:32.000Z</published>
    <updated>2022-10-20T04:01:08.031Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>获取textFiled的值的时候，英文，数字键盘是没有问题的，假设输入的是abcd，获取的值是abcd，但是如果使用中文键盘的时候，同样输入abcd，获取到的却是a b c d 字符之间出现了空格。</p></blockquote><p>试了这方法 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSString *strUrl = [urlString stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;];</span><br></pre></td></tr></table></figure><p>并没什么用<br>然后再利用这个方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSString *strUrl = [urlString  stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];</span><br></pre></td></tr></table></figure><p>也没什么用</p><p>最终找到此方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSString *strUrl = [[urlString componentsSeparatedByCharactersInSet:[NSCharacterSet whitespaceCharacterSet]] componentsJoinedByString:@&quot;&quot;];</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;获取textFiled的值的时候，英文，数字键盘是没有问题的，假设输入的是abcd，获取的值是abcd，但是如果使用中文键盘的时候，同样输入abcd，获取到的却是a b c d 字符之间出现了空格。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;试了这</summary>
      
    
    
    
    
    <category term="iOS" scheme="http://example.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>UIScrollView下拉刷新加载数据</title>
    <link href="http://example.com/2017/11/25/UIScrollView%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2017/11/25/UIScrollView%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE/</id>
    <published>2017-11-25T09:07:04.000Z</published>
    <updated>2022-10-20T04:01:23.217Z</updated>
    
    <content type="html"><![CDATA[<h5 id="首先为UIScrollView添加加载提示View"><a href="#首先为UIScrollView添加加载提示View" class="headerlink" title="首先为UIScrollView添加加载提示View"></a>首先为UIScrollView添加加载提示View</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UILabel *refresh = [[UILabel alloc] initWithFrame:CGRectMake(0, -50, 320, 50)];</span><br><span class="line">refresh.text  = @&quot;下拉刷新&quot;;</span><br><span class="line">self.refresh = refresh;</span><br><span class="line">refresh.tag = 0;</span><br><span class="line">[scrollV addSubview:refresh];</span><br></pre></td></tr></table></figure><h5 id="实现UIScrollViewDelegate"><a href="#实现UIScrollViewDelegate" class="headerlink" title="实现UIScrollViewDelegate"></a>实现UIScrollViewDelegate</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//offset发生改变</span><br><span class="line"></span><br><span class="line">-(void)scrollViewDidScroll:(UIScrollView *)scrollView&#123;</span><br><span class="line">    if (scrollView.contentOffset.y &lt;= -50) &#123;</span><br><span class="line">        if (self.refresh.tag == 0) &#123;</span><br><span class="line">            self.refresh.text = @&quot;松开刷新&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        self.refresh.tag = 1;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">       //防止用户在下拉到contentOffset.y &lt;= -50后不松手，然后又往回滑动，需要将值设为默认状态</span><br><span class="line">        self.refresh.tag = 0;</span><br><span class="line">        self.refresh.text = @&quot;下拉刷新&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//即将结束拖拽</span><br><span class="line">- (void)scrollViewWillEndDragging:(UIScrollView *)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)targetContentOffset&#123;</span><br><span class="line">    if (self.refresh.tag == 1) &#123;</span><br><span class="line">        [UIView animateWithDuration:.3 animations:^&#123;</span><br><span class="line">            self.refresh.text = @&quot;加载中&quot;;</span><br><span class="line">            scrollView.contentInset = UIEdgeInsetsMake(50.0f, 0.0f, 0.0f, 0.0f);</span><br><span class="line">        &#125;];</span><br><span class="line">        //数据加载成功后执行；这里为了模拟加载效果，一秒后执行恢复原状代码</span><br><span class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 1 * NSEC_PER_SEC), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            [UIView animateWithDuration:.3 animations:^&#123;</span><br><span class="line">                self.refresh.tag = 0;</span><br><span class="line">                self.refresh.text = @&quot;下拉刷新&quot;;</span><br><span class="line">                scrollView.contentInset = UIEdgeInsetsMake(0, 0, 0, 0);</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;首先为UIScrollView添加加载提示View&quot;&gt;&lt;a href=&quot;#首先为UIScrollView添加加载提示View&quot; class=&quot;headerlink&quot; title=&quot;首先为UIScrollView添加加载提示View&quot;&gt;&lt;/a&gt;首先为UIScroll</summary>
      
    
    
    
    
    <category term="iOS" scheme="http://example.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS触摸事件响应原理</title>
    <link href="http://example.com/2016/10/17/iOS%E8%A7%A6%E6%91%B8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2016/10/17/iOS%E8%A7%A6%E6%91%B8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%8E%9F%E7%90%86/</id>
    <published>2016-10-17T09:03:21.000Z</published>
    <updated>2022-10-20T04:01:15.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统响应阶段"><a href="#系统响应阶段" class="headerlink" title="系统响应阶段"></a>系统响应阶段</h1><ul><li>1.手指触摸屏幕，屏幕感受到触摸后，将事件交给<code>IOKit</code>来处理。</li><li>2.<code>iOKit</code>将触摸事件封装成<code>iOHIDEvent</code>对象，并通过<code>mach port</code>传递给<code>SpringBoard</code>进程。</li></ul><blockquote><p><code>mach port</code>是进程端口，各进程间通过它来通信。<code>Springboard</code>是一个系统进程，可以理解为桌面系统，可以统一管理和分发系统收到的触摸事件。</p></blockquote><ul><li>3.<code>Springboard</code>由于接收到触摸事件，因此触发了系统进程的主线程的<code>runloop</code>的<code>source</code>回掉。发生触摸事件的时候，你有可能正在桌面上翻页，也有可能正在头条上看新闻，如果是前者，则触发<code>Springboard</code>主线程的<code>runloop</code>的<code>source0</code>回调，将桌面系统交给系统进程去消耗。而如果是后者，则将触摸事件通过<code>IPC</code>传递给前台<code>app</code>进程，后面的事便是<code>APP</code>内部对于触摸事件的响应了。</li></ul><h1 id="APP响应触摸事件"><a href="#APP响应触摸事件" class="headerlink" title="APP响应触摸事件"></a>APP响应触摸事件</h1><ul><li><p>1.<code>APP</code>进程的<code>mach port</code>接收来自<code>Springboard</code>的触摸事件，主线程<code>runloop</code>被唤醒，触发<code>source1</code>回调。</p></li><li><p>2.<code>source1</code>回调又触发了一个<code>source0</code>回调，将接收到的<code>IOHIDEvent</code>对象封装成<code>UIEven</code>t对象，此时<code>APP</code>将正式开始对于触摸的响应。</p></li><li><p>3.<code>source0</code>回调将触摸事件添加到<code>UIApplication</code>的事件队列，当触摸事件出队后<code>UIApplication</code>为触摸事件寻找最佳响应者。</p></li><li><p>4.寻找到最佳响应着之后，接下来的事情便是事件在响应链中传递和响应。</p></li></ul><h1 id="触摸-事件-响应者"><a href="#触摸-事件-响应者" class="headerlink" title="触摸 事件 响应者"></a>触摸 事件 响应者</h1><h2 id="触摸"><a href="#触摸" class="headerlink" title="触摸"></a>触摸</h2><p>触摸对象即<code>UITouch</code>对象。一个手指触摸屏幕，就会生成一个<code>UITouch</code>对象，如果多个手指同时触摸，就会生成多个<code>UITouch</code>对象。多个手指先后触摸，如果系统判断多个手指触摸的是同一个地方，那么不会生成多个<code>UITouch</code>对象，而是更新这个<code>UITouch</code>对象，改变其<code>tap count</code>。如果对歌手指触摸的不是同一个地方，那么就会产生对个<code>UITouch</code>对象。</p><h2 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h2><p>触摸事件即<code>UIEvent</code>。<code>UIEvent</code>即对<code>UITouch</code>的一次封装。由于一次触摸事件并不止有一个触摸对象，可能是多指同时触摸。触摸对象集合可以通过<code>allUITouchs</code>属性来获取。</p><h2 id="响应者"><a href="#响应者" class="headerlink" title="响应者"></a>响应者</h2><p>响应者即<code>UIResponser</code>，<code>UIView</code>，<code>UIViewController</code>，<code>UIApplication</code>，<code>UIAppdelegate</code>等实例都是<code>UIResponser</code>，响应者响应触摸事件是由下面的方法来实现的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//手指触碰屏幕，触摸开始</span><br><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(nullable UIEvent *)event;</span><br><span class="line">//手指在屏幕上移动</span><br><span class="line">- (void)touchesMoved:(NSSet&lt;UITouch *&gt; *)touches withEvent:(nullable UIEvent *)event;</span><br><span class="line">//手指离开屏幕，触摸结束</span><br><span class="line">- (void)touchesEnded:(NSSet&lt;UITouch *&gt; *)touches withEvent:(nullable UIEvent *)event;</span><br><span class="line">//触摸结束前，某个系统事件中断了触摸，例如电话呼入</span><br><span class="line">- (void)touchesCancelled:(NSSet&lt;UITouch *&gt; *)touches withEvent:(nullable UIEvent *)event;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="寻找最佳响应者"><a href="#寻找最佳响应者" class="headerlink" title="寻找最佳响应者"></a>寻找最佳响应者</h2><p>当<code>APP</code>通过<code>mach port</code>得到这个触摸事件时，<code>APP</code>中有那么多<code>UIView</code>或者<code>UIViewController</code>，到底应该谁去响应呢？寻找最佳响应者就是找出这个优先级最高的响应对象。</p><ul><li>寻找最佳响应着的具体流程如下：</li><li>1.<code>UIApplication</code>首先将事件传递给窗口对象（<code>UIWindow</code>），如果有多个<code>UIWindow</code>对象，则先选择最后加上的<code>UIWindow</code>对象。</li><li>2.若<code>UIWindow</code>对象能响应这个触摸事件，则继续向其子视图传递，向子视图传递时也是先传递给最后加上的子视图。</li><li><ol start="3"><li>若子视图无法响应该事件，则返回父视图，再传递给倒数第二个加入该父视图的子视图。</li></ol></li></ul><h2 id="视图如何判断自己能否响应触摸事件？"><a href="#视图如何判断自己能否响应触摸事件？" class="headerlink" title="视图如何判断自己能否响应触摸事件？"></a>视图如何判断自己能否响应触摸事件？</h2><p>以下情况不能响应触摸事件：</p><ul><li>1.触摸点不在视图范围内。</li><li>2.不允许交互： 视图的<code>userInteractionEnabled = NO</code>。</li><li>3.隐藏：<code>hidden = YES</code>，如果视图隐藏了，则不能响应事件。</li><li>4.透明度：当视图的透明度小于等于0.01时，不能响应事件。</li></ul><h2 id="寻找最佳响应者的原理"><a href="#寻找最佳响应者的原理" class="headerlink" title="寻找最佳响应者的原理"></a>寻找最佳响应者的原理</h2><h3 id="hitTest-withEvent"><a href="#hitTest-withEvent" class="headerlink" title="hitTest:withEvent:"></a>hitTest:withEvent:</h3><p>每个<code>UIView</code>都有一个<code>hitTest:witnEvent:</code>方法。这个方法是寻找最佳响应者的核心方法，同时又是传递事件的桥梁。它的作用是询问事件在当前视图中的响应者。<code>hitTest:withEvent:</code>返回一个<code>UIView</code>对象，作为当前视图层次中的响应者。其默认实现是：</p><ul><li>若当前视图无法响应事件，则返回nil。</li><li>若当前视图能响应事件，但无子视图可响应事件，则返回当前视图。</li><li>若当前视图能响应事件，同时有子视图能响应，则返回子视图层次中的事件响应者。</li></ul><p>开始时<code>UIApplication</code>调用<code>UIWindow</code>的<code>hitTest:wuithEvent:</code>方法将触摸事件传递给<code>UIWindow</code>，如果<code>UIWindow</code>能够响应触摸事件，则调用<code>hitTest：withEvent：</code>将事件传递给其子是视图并询问子视图上的最佳响应者，这样一级一级传递下去，获取最终的最佳响应者。<br><code>hitTest:withEvent:</code>的代码实现大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123;</span><br><span class="line">    //3种状态无法响应事件</span><br><span class="line">     if (self.userInteractionEnabled == NO || self.hidden == YES ||  self.alpha &lt;= 0.01) return nil; </span><br><span class="line">    //触摸点若不在当前视图上则无法响应事件</span><br><span class="line">    if ([self pointInside:point withEvent:event] == NO) return nil; </span><br><span class="line">    //从后往前遍历子视图数组 </span><br><span class="line">    int count = (int)self.subviews.count; </span><br><span class="line">    for (int i = count - 1; i &gt;= 0; i--) </span><br><span class="line">    &#123; </span><br><span class="line">        // 获取子视图</span><br><span class="line">        UIView *childView = self.subviews[i]; </span><br><span class="line">        // 坐标系的转换,把触摸点在当前视图上坐标转换为在子视图上的坐标</span><br><span class="line">        CGPoint childP = [self convertPoint:point toView:childView]; </span><br><span class="line">        //询问子视图层级中的最佳响应视图</span><br><span class="line">        UIView *fitView = [childView hitTest:childP withEvent:event]; </span><br><span class="line">        if (fitView) </span><br><span class="line">        &#123;</span><br><span class="line">            //如果子视图中有更合适的就返回</span><br><span class="line">            return fitView; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    //没有在子视图中找到更合适的响应视图，那么自身就是最合适的</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意这里的方法<code>pointInside:withEvent:</code>，这个方法是判断触摸点是否在视图范围内。默认的实现是如果触摸点在视图范围内则返回<code>YES</code>，否则返回<code>NO</code>。<br>下面我们在上图中的每个视图层次中添加三个方法来验证之前的分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">    return [super hitTest:point withEvent:event];</span><br><span class="line">&#125;</span><br><span class="line">- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event&#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">    return [super pointInside:point withEvent:event];</span><br><span class="line">&#125;</span><br><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event&#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击视图，打印出来的结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-[AView hitTest:withEvent:]</span><br><span class="line">-[AView pointInside:withEvent:]</span><br><span class="line">-[CView hitTest:withEvent:]</span><br><span class="line">-[CView pointInside:withEvent:]</span><br><span class="line">-[EView hitTest:withEvent:]</span><br><span class="line">-[EView pointInside:withEvent:]</span><br><span class="line">-[EView touchesBegan:withEvent:]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这和我们的分析是一致的。</p><h2 id="触摸事件的响应"><a href="#触摸事件的响应" class="headerlink" title="触摸事件的响应"></a>触摸事件的响应</h2><p>通过<code>hitTest:withEvent:</code>已经找到了最佳响应者，现在要做的事情是让这个最佳响应者触摸事件。这个最佳响应者对于触摸事件拥有决定权，它可以决定是自己响应这个事件，也可以自己响应之后还把它传递给其他响应者，这个响应者构成的就是响应链。<br>响应者对于事件的响应和传递都是在<code>touchesBegan:withEvent</code>这个方法中完成的。该方法默认的实现是将该方法沿着响应链往下传递<br>响应者对于接受到的事件有三种操作：</p><ul><li>1.默认的操作。不拦截，事件会沿着默认的响应链自动往下传递。</li><li>2.拦截，不在往下分发事件，重写<code>touchesBegan:withEvent:</code>方法，不调用父类的<code>touchesBegan:withEvent:</code>方法。</li><li>3.不拦截，继续往下分发事件，重新<code>touchesBegan:withEvent</code>方法，并调用父类<code>touchesBegan:withEvent:</code>方法。<br>我们一般在编写代码时，如果某个视图响应事件，会在该视图类中重写<code>touchesBegan:withEvent:</code>方法，但是并不会调用父类的<code>touchesBegan:withEvent:</code>方法，这样我们就把这个事件拦截下来，不在沿着响应链往下传递。那么我们为什么想要沿着响应链传递事件就要写父类的<code>touchesBegan:withEvent:</code>方法呢？因为父类的<code>touchesBegan:withEvent:</code>方法默认是向下传递的。重写<code>touchesBegan:withEvent:</code>并调用父类的方法就是既对触摸事件实现了响应，又将事件沿着响应链传递了。</li></ul><h3 id="响应链中的事件传递规则"><a href="#响应链中的事件传递规则" class="headerlink" title="响应链中的事件传递规则"></a>响应链中的事件传递规则</h3><p>每一个响应者对象都又一个<code>nextResponder</code>方法，用来获取响应链中当前响应者对象的下一个响应者。硬刺，如果事件的最佳响应者确定了，那么整个响应链也就确定了。<br>对于响应者对象，默认的<code>nextResponse</code>对象如下：</p><ul><li>UIView<br>若视图是UIViewController的view，则其<code>nextResponder</code>是UIViewController，若其只是单独的视图，则其<code>nextResponser</code>是其父视图。</li><li>UIViewController<br>若该视图是window的根视图，则其<code>nextResponser</code>是UIViewController，若其是由其他视图控制器present的，则其nextResponder是presenting view controller。</li><li>UIWindow<br>nextResponder为UIApplication对象。<br>如果最佳响应者对象是UITextField，则响应链为：UITextField-&gt;UIView-&gt;UIView-&gt;UIViewController-&gt;UIWindow-&gt;UIApplication-&gt;UIApplicationDelegate.在父类的<code>touchesBegan:withEvent:</code>方法中，可能调用了<code>[self.nextResponder touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event]</code>这样来将事件沿着响应链传递。</li></ul><h3 id="UIControl"><a href="#UIControl" class="headerlink" title="UIControl"></a>UIControl</h3><p><code>UIControl</code>是系统提供的能够以<code>target-action</code>模式处理触摸事件的控件，iOS中<code>UIButton</code>、<code>UISegmentedControl</code>、<code>UISwitch</code>等控件都是UIControl的子类。当<code>UIControl</code>跟踪到触摸事件时，会向其上添加的<code>target</code>发送事件以执行<code>action</code>。<code>UIConotro</code>l是<code>UIView</code>的子类，因此本身也具备<code>UIResponder</code>应有的身份。</p><h6 id="UIControl会阻止父视图上的手势识别器的行为，也就是UIControl的执行优先级比父视图上面的UIGestureRecognizer要高，但是比UIControl自身的UIGestureRecognizer优先级要低。"><a href="#UIControl会阻止父视图上的手势识别器的行为，也就是UIControl的执行优先级比父视图上面的UIGestureRecognizer要高，但是比UIControl自身的UIGestureRecognizer优先级要低。" class="headerlink" title="UIControl会阻止父视图上的手势识别器的行为，也就是UIControl的执行优先级比父视图上面的UIGestureRecognizer要高，但是比UIControl自身的UIGestureRecognizer优先级要低。"></a>UIControl会阻止父视图上的手势识别器的行为，也就是UIControl的执行优先级比父视图上面的UIGestureRecognizer要高，但是比UIControl自身的UIGestureRecognizer优先级要低。</h6>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;系统响应阶段&quot;&gt;&lt;a href=&quot;#系统响应阶段&quot; class=&quot;headerlink&quot; title=&quot;系统响应阶段&quot;&gt;&lt;/a&gt;系统响应阶段&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1.手指触摸屏幕，屏幕感受到触摸后，将事件交给&lt;code&gt;IOKit&lt;/code&gt;来处理。&lt;/l</summary>
      
    
    
    
    
    <category term="iOS" scheme="http://example.com/tags/iOS/"/>
    
  </entry>
  
</feed>
